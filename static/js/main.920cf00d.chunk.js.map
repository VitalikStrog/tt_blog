{"version":3,"sources":["app/hooks.ts","features/PostsList/postsListAPI.ts","features/PostsList/postsListSlice.ts","features/PostCard.tsx","features/PostsList/PostsList.tsx","features/EditForm.tsx","features/NewCommentForm.tsx","features/PostDetails.tsx","features/CreatePostForm.tsx","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","API_URL","createNewPost","newPost","fetch","method","headers","body","JSON","stringify","then","response","json","post","deletePost","postId","loadPosts","createAsyncThunk","a","posts","createPost","removePost","asyncUpdatePost","params","updatedPost","createNewComment","postsListSlice","createSlice","name","initialState","postsList","selectedPostId","update","reducers","changePost","state","action","payload","setUpdate","Math","random","extraReducers","builder","addCase","fulfilled","actions","selectPosts","selectPostId","selectUpdate","PostCard","dispatch","Card","sx","minWidth","CardActionArea","onClick","id","CardContent","minHeight","Typography","gutterBottom","variant","component","color","title","CardActions","Button","size","PostsList","useEffect","className","map","EditForm","titleValue","bodyValue","useState","setTitle","setBody","open","setOpen","handleClose","IconButton","Modal","maxWidth","maxHeight","position","top","margin","onClose","Box","display","flexDirection","alignItems","borderRadius","bgcolor","padding","m","width","noValidate","autoComplete","TextField","required","label","defaultValue","onChange","event","target","value","ButtonGroup","NewCommentForm","anchorEl","setAnchorEl","Boolean","undefined","currentTarget","Popover","anchorOrigin","vertical","horizontal","height","ExpandMore","styled","props","expand","other","theme","transform","marginLeft","transition","transitions","create","duration","shortest","PostDetails","React","expanded","setExpanded","comments","setPost","loadPost","loadedPost","CardHeader","avatar","Avatar","red","disableSpacing","disabled","length","Collapse","in","timeout","unmountOnExit","paragraph","comment","CreatePostForm","clearForm","onSubmit","type","App","store","configureStore","reducer","postsListReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.920cf00d.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","const API_URL = 'https://bloggy-api.herokuapp.com';\n\nexport function loadAllPosts(): Promise<Post[]> {\n  return fetch(`${API_URL}/posts`)\n    .then(response => response.json())\n    .then(posts => posts);\n}\n\nexport function loadPost(postId: number): Promise<Post> {\n  return fetch(`${API_URL}/posts/${postId}?_embed=comments`)\n    .then(response => response.json())\n    .then(post => post);\n}\n\nexport function createNewPost(newPost: Partial<Post>) {\n  return fetch(`${API_URL}/posts`, {\n    method: \"POST\",\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({ ...newPost }),\n  })\n    .then(response => response.json())\n    .then(post => post);\n}\n\nexport function deletePost(postId: number) {\n  return fetch(`${API_URL}/posts/${postId}`, {\n    method: \"DELETE\",\n  })\n    .then(response => response.json())\n    .then(post => post);\n}\n\nexport function updatePost(postId: number, body: Partial<Post> ) {\n  return fetch(`${API_URL}/posts/${postId}`, {\n    method: \"PUT\",\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({ ...body }),\n  })\n    .then(response => response.json())\n    .then(post => post);\n}\n\nexport function createComment(body: { postId: number, body: string }) {\n  return fetch(`${API_URL}/comments`, {\n    method: \"POST\",\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({ ...body }),\n  })\n    .then(response => response.json());\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { createNewPost, loadAllPosts, deletePost, updatePost, createComment } from './postsListAPI';\n\nexport interface postsListState {\n  postsList: Post[];\n  selectedPostId: number;\n  update: number;\n}\n\nconst initialState: postsListState = {\n  postsList: [],\n  selectedPostId: 0,\n  update: 0,\n};\n\nexport const loadPosts = createAsyncThunk(\n  'postsList/loadPosts',\n  async () => {\n    const response = await loadAllPosts();\n\n    return response;\n  }\n);\n\nexport const createPost = createAsyncThunk(\n  'postsList/createPost',\n  async (newPost: Partial<Post>) => {\n    const response = await createNewPost(newPost);\n\n    return response;\n  }\n);\n\nexport const removePost = createAsyncThunk(\n  'postsList/deletePost',\n  async (postId: number) => {\n    const response = await deletePost(postId);\n\n    return response;\n  }\n);\n\nexport const asyncUpdatePost = createAsyncThunk(\n  'postsList/updatePost',\n  async (params: { postId: number, updatedPost: Partial<Post>}) => {\n    const response = await updatePost(params.postId, params.updatedPost);\n\n    return response;\n  },\n);\n\nexport const createNewComment = createAsyncThunk(\n  'postsList/createComment',\n  async (params: {postId: number, body: string }) => {\n    const response = await createComment(params);\n\n    return response;\n  }\n)\n\nexport const postsListSlice = createSlice({\n  name: 'postsList',\n  initialState,\n  reducers: {\n    changePost: (state, action) => {\n      state.selectedPostId = action.payload;\n    },\n    setUpdate: (state) => {\n      state.update = Math.random();\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadPosts.fulfilled, (state, action) => {\n        state.postsList = action.payload;\n      })\n      .addCase(removePost.fulfilled, (state) => {\n        state.update = Math.random();\n      })\n      .addCase(createPost.fulfilled, (state) => {\n        state.update = Math.random();\n      })\n      .addCase(createNewComment.fulfilled, (state) => {\n        state.update = Math.random();\n      })\n      .addCase(asyncUpdatePost.fulfilled, (state) => {\n        state.update = Math.random();\n      })\n  }\n})\n\nexport const { changePost, setUpdate } = postsListSlice.actions;\n\nexport const selectPosts = (state: RootState) => state.posts.postsList;\nexport const selectPostId = (state: RootState) => state.posts.selectedPostId;\nexport const selectUpdate = (state: RootState) => state.posts.update;\n\nexport default postsListSlice.reducer;\n","import React from 'react';\n\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { Button, CardActionArea, CardActions } from '@mui/material';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport { changePost, selectPostId } from './PostsList/postsListSlice';\nimport { removePost } from './PostsList/postsListSlice';\n\ntype Props = {\n  post: Post;\n};\n\n\nexport const PostCard: React.FC<Props> = ({ post }) => {\n  const dispatch = useAppDispatch();\n  const postId = useAppSelector(selectPostId);\n\n  const selectPost = () => {\n    if (post.id !== postId) {\n      dispatch(changePost(post.id));\n    } else {\n      dispatch(changePost(0))\n    }\n  }\n\n  const deletePost = () => {\n    dispatch(changePost(0));\n    dispatch(removePost(post.id));\n  }\n\n  return (\n    <>\n      <Card sx={{ minWidth: 350 }}>\n        <CardActionArea onClick={() => selectPost()}>\n          <CardContent sx={{ minHeight: 100 }}>\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\n              {`Post #${post.id}`}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {post.title}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button\n            size=\"small\"\n            color=\"primary\"\n            onClick={() => deletePost()}\n          >\n            Delete\n          </Button>\n        </CardActions>\n      </Card>\n    </>\n  )\n}\n","import React, { useEffect } from 'react';\nimport './PostsList.scss';\n\nimport { PostCard } from '../PostCard';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { loadPosts, selectPosts, selectUpdate } from './postsListSlice';\n\nexport const PostsList: React.FC = () => {\n  const posts = useAppSelector(selectPosts);\n  const update = useAppSelector(selectUpdate);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(loadPosts());\n  }, [update]);\n\n  return (\n    <div className=\"postsList\">\n      {posts.map(post => (\n        <PostCard post={post} key={post.id} />\n      ))}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { asyncUpdatePost, changePost, selectPostId } from './PostsList/postsListSlice';\n\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport TextField from '@mui/material/TextField';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\n\ntype Props = {\n  titleValue: string;\n  bodyValue: string;\n}\n\nexport const EditForm: React.FC<Props> = ({ titleValue, bodyValue }) => {\n  const [title, setTitle] = useState<string>(titleValue);\n  const [body, setBody] = useState<string>(bodyValue);\n  const [open, setOpen] = useState<boolean>(false);\n  const postId = useAppSelector(selectPostId);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const dispatch = useAppDispatch();\n\n  const clearForm = () => {\n    setTitle('');\n    setBody('');\n  };\n\n  const updatePost = () => {\n    const params = { postId, updatedPost: { title: (title || titleValue), body: (body || bodyValue) }}\n    dispatch(asyncUpdatePost(params));\n    dispatch(changePost(0));\n    handleClose();\n    clearForm();\n  };\n\n  return (\n    <div>\n      <IconButton aria-label=\"settings\" onClick={handleOpen}>\n        <EditIcon />\n      </IconButton>\n      <Modal\n        sx={{\n          maxWidth: 400,\n          maxHeight: 300,\n          position: 'fixed',\n          top: 50,\n          margin: '0 auto',\n        }}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box\n          component=\"form\"\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            borderRadius: 3,\n            bgcolor: '#eee',\n            padding: 2,\n            '& .MuiTextField-root': { m: 1, width: 380 },\n          }}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <TextField\n            required\n            id=\"outlined-basic\"\n            label=\"Edit title\"\n            variant=\"outlined\"\n            defaultValue={titleValue}\n            onChange={event => setTitle(event.target.value)}\n          />\n          <TextField\n            required\n            id=\"outlined-basic\"\n            label=\"Edit post's content\"\n            variant=\"outlined\"\n            defaultValue={bodyValue}\n            onChange={event => setBody(event.target.value)}\n          />\n          <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\">\n            <Button onClick={handleClose} >Cancel</Button>\n            <Button onClick={updatePost}>Update</Button>\n          </ButtonGroup>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Popover from '@mui/material/Popover';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport { createNewComment, selectPostId } from './PostsList/postsListSlice';\n\nexport const NewCommentForm = () => {\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const [body, setBody] = useState('');\n  const postId = useAppSelector(selectPostId);\n  const dispatch = useAppDispatch();\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setBody('');\n    setAnchorEl(null);\n  };\n\n  const buttonHandler = () => {\n    dispatch(createNewComment({ postId, body }));\n    handleClose();\n  }\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <div>\n      <Button aria-describedby={id} variant=\"contained\" onClick={handleClick}>\n        Add comment\n      </Button>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        sx={{\n          padding: 5,\n        }}\n      >\n        <TextField\n          required\n          id=\"filled-basic\"\n          label=\"Type comment\"\n          variant=\"outlined\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n        <ButtonGroup\n          variant=\"contained\"\n          aria-label=\"outlined primary button group\"\n          sx={{ height: 56}}\n        >\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={buttonHandler}>Add</Button>\n        </ButtonGroup>\n      </Popover>\n    </div>\n  );\n}\n","import * as React from 'react';\n\nimport { styled } from '@mui/material/styles';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport CardActions from '@mui/material/CardActions';\nimport Collapse from '@mui/material/Collapse';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport { red } from '@mui/material/colors';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { useAppSelector } from '../app/hooks';\nimport { selectPostId, selectUpdate } from './PostsList/postsListSlice';\nimport { useEffect, useState } from 'react';\nimport { loadPost } from './PostsList/postsListAPI';\nimport { EditForm } from './EditForm';\nimport { NewCommentForm } from './NewCommentForm';\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean;\n}\n\nconst ExpandMore = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n  marginLeft: 'auto',\n  transition: theme.transitions.create('transform', {\n    duration: theme.transitions.duration.shortest,\n  }),\n}));\n\nexport const PostDetails = () => {\n  const [expanded, setExpanded] = React.useState(false);\n  const [post, setPost] = useState<Post>({ id: 0, title: '', body: '', comments: [] });\n  const postId = useAppSelector(selectPostId);\n  const update = useAppSelector(selectUpdate);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  useEffect(() => {\n    setExpanded(false);\n    loadPost(postId)\n      .then(loadedPost => setPost(loadedPost));\n  }, [postId, update])\n\n  return (\n    <Card sx={{ width: 400, minHeight: 224 }}>\n      <CardHeader\n        avatar={\n          <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\">\n            {post.id}\n          </Avatar>\n        }\n        action={\n          <EditForm titleValue={post.title} bodyValue={post.body} />\n        }\n        title={post.title}\n      />\n      <CardContent sx={{ minHeight: 60 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {post.body}\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <NewCommentForm />\n        <ExpandMore\n          disabled={post.comments.length === 0}\n          expand={expanded}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </ExpandMore>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography paragraph>Comments:</Typography>\n          <Typography paragraph>\n            {post.comments.map(comment => (\n              <li key={comment.id}>\n                {comment.body}\n              </li>\n            ))}\n          </Typography>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n}\n","import React, { useState } from 'react';\nimport { createPost } from './PostsList/postsListSlice';\n\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport TextField from '@mui/material/TextField';\nimport { useAppDispatch } from '../app/hooks';\n\nexport const CreatePostForm: React.FC = () => {\n  const [title, setTitle] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n  const [open, setOpen] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n\n  const clearForm = () => {\n    setTitle('');\n    setBody('');\n  };\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => {\n    setOpen(false);\n    clearForm();\n  };\n\n  const createNewPost = () => {\n    dispatch(createPost({ title, body }));\n    handleClose();\n    clearForm();\n  }\n\n  return (\n    <div>\n      <Button onClick={handleOpen}>Create post</Button>\n      <Modal\n        sx={{\n          maxWidth: 400,\n          maxHeight: 300,\n          position: 'fixed',\n          top: 50,\n          margin: '0 auto',\n        }}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box\n          onSubmit={createNewPost}\n          component=\"form\"\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            borderRadius: 3,\n            bgcolor: '#eee',\n            padding: 2,\n            '& .MuiTextField-root': { m: 1, width: 380 },\n          }}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <TextField\n            required\n            id=\"outlined-basic\"\n            label=\"Enter title\"\n            variant=\"outlined\"\n            value={title}\n            onChange={event => setTitle(event.target.value)}\n          />\n          <TextField\n            required\n            id=\"outlined-basic\"\n            label=\"Enter post's content\"\n            variant=\"outlined\"\n            value={body}\n            onChange={event => setBody(event.target.value)}\n          />\n          <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\">\n            <Button onClick={handleClose} >Cancel</Button>\n            <Button\n              type=\"submit\"\n            >\n              Create\n            </Button>\n          </ButtonGroup>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { PostsList } from './features/PostsList/PostsList';\nimport { PostDetails } from './features/PostDetails'\nimport { useAppSelector } from './app/hooks';\nimport { selectPostId } from './features/PostsList/postsListSlice';\nimport { CreatePostForm } from './features/CreatePostForm';\n\nconst App: React.FC = () => {\n  const postId = useAppSelector(selectPostId);\n\n  return (\n    <div className=\"App\">\n      <main className=\"main-content\">\n        <div className=\"group\">\n          <CreatePostForm />\n          <div className=\"sidebar\">\n            <PostsList />\n          </div>\n        </div>\n        <div className=\"content\">\n          {postId\n            ? <PostDetails />\n            : (\n              <div className=\"selection-message\">\n                {'Click on post to select'}\n              </div>\n            )\n          }\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport postsListReducer from '../features/PostsList/postsListSlice';\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsListReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}